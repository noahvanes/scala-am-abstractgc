* About Scala-AM

The goal of the Scala-AM framework is to experiment with abstract machines and language semantics.
Scala-AM is initially based on the theoretical framework of Abstracting Abstract Machines (Van Horn & Might, 2010).
For more information on the framework, look [[https://github.com/acieroid/scala-am][here]] or consult the following publications:
  - Scala-AM: A Modular Static Analysis Framework, SCAM 2016, [[http://soft.vub.ac.be/Publications/2016/vub-soft-tr-16-07.pdf][pdf]], [[https://zenodo.org/badge/latestdoi/23603/acieroid/scala-am][doi]].
  - Building a Modular Static Analysis Framework in Scala, [[http://soft.vub.ac.be/Publications/2016/vub-soft-tr-16-13.pdf][pdf]].
  - Mailbox abstractions for static analysis of actor programs, ECOOP 2017,  [[http://drops.dagstuhl.de/opus/volltexte/2017/7254/pdf/LIPIcs-ECOOP-2017-25.pdf][pdf]].

* Abstract Reference Counting

This fork extends Scala-AM with a proof-of-concept implementation of abstract reference counting.
Currently, this implementation is provided as a separate machine abstraction in =src/main/scala/machine/AAMRefCounting.scala= (or =src/main/scala/machine/AAMRefCountingVanilla.scala= for an implementation without cycle detection).
As such -- thanks to the modularity of Scala-AM -- it can be directly configured with various context-sensitivities (e.g. the k-CFA family) and abstract domains (e.g. using a typelattice or a lattice in the k-points-to family). 

In addition, implementations are provided of "traditional" abstract garbage collection using tracing GC in =src/main/scala/machine/AAMGC.scala= (which applies abstract GC at every transition) and =src/main/scala/machine/AAMGCAlt.scala= (which applies abstract GC at every join in the store).

Note that, at this point, all our machine abstractions only support a limited subset of Scheme, as the input expression first needs to be preprocessed to compute free variables and to inline references to primitives, which is beneficial to the efficiency of abstract garbage collection.

For more information on abstract garbage collection, consult the following publication:
- Might, M., & Shivers, O. (2006, September). Improving flow analyses via Î“CFA: Abstract garbage collection and counting. In ACM SIGPLAN Notices (Vol. 41, No. 9, pp. 13-25). ACM, [[https://scholar.google.be/scholar?output=instlink&q=info:B5edOVcrE-4J:scholar.google.com/&hl=en&as_sdt=0,5&scillfp=5544457856398583264&oi=lle][pdf]].

* Benchmarks

The benchmarks found in our ECOOP'19 submission can be run by launching =src/main/scala/machine/Main.scala= using sbt, which outputs the results to a CSV-file in the top-level folder =output=.
